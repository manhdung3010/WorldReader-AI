import os
import google.generativeai as genai
from PyPDF2 import PdfReader
from dotenv import load_dotenv
from datetime import datetime

class DocumentChatbot:
    """Chatbot s·ª≠ d·ª•ng Gemini ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ t√†i li·ªáu"""
    
    def __init__(self):
        # Load environment variables
        load_dotenv()
        
        # Kh·ªüi t·∫°o Gemini
        genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
        self.model = genai.GenerativeModel(os.getenv('GOOGLE_MODEL'))
        
        # Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ n·ªôi dung t√†i li·ªáu v√† danh s√°ch file ƒë√£ t·∫£i
        self.document_contents = {}  # Dictionary ƒë·ªÉ l∆∞u n·ªôi dung c·ªßa t·ª´ng file
        self.loaded_files = []
        
        # X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√† th∆∞ m·ª•c uploads
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(os.path.dirname(current_dir))
        except:
            current_dir = os.getcwd()
            project_root = os.path.dirname(os.path.dirname(current_dir))
        
        # Th∆∞ m·ª•c uploads n·∫±m trong th∆∞ m·ª•c chatbot
        self.upload_folder = os.path.join(current_dir, "uploads")
        
        # T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(self.upload_folder):
            os.makedirs(self.upload_folder)
            print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c uploads t·∫°i: {self.upload_folder}")
        else:  
            print(f"‚úÖ Th∆∞ m·ª•c uploads ƒë√£ t·ªìn t·∫°i t·∫°i: {self.upload_folder}")

        # T·ª± ƒë·ªông load l·∫°i t·∫•t c·∫£ documents khi kh·ªüi t·∫°o
        print("üîÑ ƒêang load l·∫°i t·∫•t c·∫£ t√†i li·ªáu...")
        self.reload_all_documents()

    def reload_all_documents(self):
        """Load l·∫°i t·∫•t c·∫£ t√†i li·ªáu t·ª´ th∆∞ m·ª•c uploads"""
        try:
            self.document_contents = {}  # Reset tr∆∞·ªõc khi t·∫£i l·∫°i
            self.loaded_files = []
            
            if not os.path.exists(self.upload_folder):
                print(f"‚ùå Th∆∞ m·ª•c uploads kh√¥ng t·ªìn t·∫°i: {self.upload_folder}")
                return
                
            all_files = os.listdir(self.upload_folder)
            for filename in all_files:
                file_path = os.path.join(self.upload_folder, filename)
                if os.path.isfile(file_path):  # Ch·ªâ x·ª≠ l√Ω file, b·ªè qua th∆∞ m·ª•c
                    if filename.lower().endswith('.pdf'):
                        self.load_pdf(file_path)
                    elif filename.lower().endswith('.txt'):
                        self.load_text(file_path)
                    elif filename.lower().endswith(('.doc', '.docx')):
                        print(f"‚ö†Ô∏è Ch∆∞a h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß file Word: {filename}")
                        # T·∫°m th·ªùi coi nh∆∞ ƒë√£ loaded ƒë·ªÉ kh√¥ng x√≥a file
                        self.loaded_files.append(file_path)
            print(f"‚úÖ ƒê√£ load {len(self.loaded_files)} t√†i li·ªáu")
        except Exception as e:
            print(f"‚ùå L·ªói khi load l·∫°i t√†i li·ªáu: {e}")

    def save_uploaded_file(self, file):
        """L∆∞u file upload v√†o th∆∞ m·ª•c"""
        try:
            # T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
            if not os.path.exists(self.upload_folder):
                os.makedirs(self.upload_folder)
                print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c uploads: {self.upload_folder}")
                
            # T·∫°o t√™n file v·ªõi timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{file.filename}"
            file_path = os.path.join(self.upload_folder, filename)
            
            # L∆∞u file
            print(f"ƒêang l∆∞u file t·∫°i: {file_path}")
            file.save(file_path)
            
            # Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng ch∆∞a
            if not os.path.exists(file_path):
                print(f"‚ùå Kh√¥ng th·ªÉ l∆∞u file t·∫°i: {file_path}")
                return None
                
            print(f"‚úÖ ƒê√£ l∆∞u file: {filename}")
            
            # Load n·ªôi dung file
            success = False
            if file.filename.lower().endswith('.pdf'):
                success = self.load_pdf(file_path)
            elif file.filename.lower().endswith('.txt'):
                success = self.load_text(file_path)
            elif file.filename.lower().endswith(('.doc', '.docx')):
                print(f"‚ö†Ô∏è Ch∆∞a h·ªó tr·ª£ ƒë·∫ßy ƒë·ªß file Word: {filename}")
                # T·∫°m th·ªùi coi nh∆∞ ƒë√£ loaded ƒë·ªÉ kh√¥ng x√≥a file
                self.loaded_files.append(file_path)
                success = True
                
            if success:
                return file_path
            else:
                # N·∫øu kh√¥ng load ƒë∆∞·ª£c, x√≥a file
                if os.path.exists(file_path):
                    os.remove(file_path)
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")
            import traceback
            traceback.print_exc()
            return None

    def load_pdf(self, pdf_path):
        """ƒê·ªçc n·ªôi dung t·ª´ file PDF"""
        try:
            reader = PdfReader(pdf_path)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:  # Ch·ªâ th√™m n·∫øu c√≥ text
                    text += page_text + "\n"
            
            # L∆∞u n·ªôi dung v√†o dictionary v·ªõi key l√† ƒë∆∞·ªùng d·∫´n file
            self.document_contents[pdf_path] = text
            if pdf_path not in self.loaded_files:
                self.loaded_files.append(pdf_path)
            print(f"‚úÖ ƒê√£ load file PDF: {os.path.basename(pdf_path)}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file PDF {os.path.basename(pdf_path)}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def load_text(self, text_path):
        """ƒê·ªçc n·ªôi dung t·ª´ file text"""
        try:
            with open(text_path, 'r', encoding='utf-8') as file:
                content = file.read()
            
            # L∆∞u n·ªôi dung v√†o dictionary v·ªõi key l√† ƒë∆∞·ªùng d·∫´n file
            self.document_contents[text_path] = content
            if text_path not in self.loaded_files:
                self.loaded_files.append(text_path)
            print(f"‚úÖ ƒê√£ load file text: {os.path.basename(text_path)}")
            return True
        except UnicodeDecodeError:
            # Th·ª≠ l·∫°i v·ªõi encoding kh√°c
            try:
                with open(text_path, 'r', encoding='latin-1') as file:
                    content = file.read()
                self.document_contents[text_path] = content
                if text_path not in self.loaded_files:
                    self.loaded_files.append(text_path)
                print(f"‚úÖ ƒê√£ load file text (latin-1): {os.path.basename(text_path)}")
                return True
            except Exception as e:
                print(f"‚ùå L·ªói khi ƒë·ªçc file text {os.path.basename(text_path)}: {e}")
                return False
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file text {os.path.basename(text_path)}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_loaded_files(self):
        """L·∫•y danh s√°ch c√°c file ƒë√£ t·∫£i"""
        return [os.path.basename(file_path) for file_path in self.loaded_files]

    def delete_file(self, file_name):
        """X√≥a m·ªôt file c·ª• th·ªÉ d·ª±a tr√™n t√™n file"""
        try:
            # T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ª´ t√™n file
            full_path = None
            for path in self.loaded_files:
                if os.path.basename(path) == file_name:
                    full_path = path
                    break
            
            if not full_path:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_name}")
                return False
            
            # X√≥a file v√† lo·∫°i b·ªè kh·ªèi danh s√°ch
            if os.path.exists(full_path):
                os.remove(full_path)
                
            if full_path in self.document_contents:
                del self.document_contents[full_path]
                
            if full_path in self.loaded_files:
                self.loaded_files.remove(full_path)
                
            print(f"‚úÖ ƒê√£ x√≥a file: {file_name}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a file {file_name}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def delete_all_files(self):
        """X√≥a t·∫•t c·∫£ c√°c file ƒë√£ t·∫£i"""
        success = True
        for file_path in self.loaded_files[:]:  # Create a copy to iterate
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
                if file_path in self.document_contents:
                    del self.document_contents[file_path]
                    
                self.loaded_files.remove(file_path)
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a file {os.path.basename(file_path)}: {e}")
                success = False
        
        self.document_contents = {}
        self.loaded_files = []
        
        if success:
            print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ c√°c file")
        return success

    def add_document_context(self):
        """Th√™m context t·ª´ t·∫•t c·∫£ t√†i li·ªáu v√†o chat"""
        if not self.document_contents:
            return "Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c load"
        
        # K·∫øt h·ª£p n·ªôi dung c·ªßa t·∫•t c·∫£ t√†i li·ªáu v·ªõi ph√¢n t√°ch r√µ r√†ng
        combined_content = ""
        for idx, (file_path, content) in enumerate(self.document_contents.items()):
            file_name = os.path.basename(file_path)
            combined_content += f"\n\n--- DOCUMENT {idx+1}: {file_name} ---\n\n{content}"
        
        context_prompt = f"""
        D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu m√† t√¥i mu·ªën b·∫°n tham kh·∫£o ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi:
        
        {combined_content}
        
        H√£y s·ª≠ d·ª•ng th√¥ng tin t·ª´ t√†i li·ªáu tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi ti·∫øp theo.
        """
        response = self.chat.send_message(context_prompt)
        return response.text

    def get_chat_history(self):
        """L·∫•y l·ªãch s·ª≠ chat"""
        return self.chat_history

    def add_to_history(self, role, content):
        """Th√™m message v√†o l·ªãch s·ª≠ chat"""
        self.chat_history.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })

    def get_answer(self, question, history=None):
        """Tr·∫£ l·ªùi c√¢u h·ªèi v·ªõi l·ªãch s·ª≠ chat t·ª´ client"""
        try:
            # T·∫°o chat session m·ªõi cho m·ªói request
            chat = self.model.start_chat(history=[])
            
            # Th√™m context t·ª´ t√†i li·ªáu
            if not self.document_contents:
                return {
                    "success": False,
                    "error": "Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c load. Vui l√≤ng t·∫£i t√†i li·ªáu tr∆∞·ªõc khi h·ªèi."
                }
                
            # Add document context
            context = "D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu tham kh·∫£o:\n\n"
            for idx, (file_path, content) in enumerate(self.document_contents.items()):
                file_name = os.path.basename(file_path)
                context += f"\n\n--- DOCUMENT {idx+1}: {file_name} ---\n\n{content}"
            chat.send_message(context)
            
            # Process history and question
            if history and len(history) > 0:
                context = "D·ª±a v√†o cu·ªôc h·ªôi tho·∫°i sau:\n\n"
                for msg in history:
                    context += f"{msg['role']}: {msg['content']}\n"
                context += f"\nV√† c√¢u h·ªèi hi·ªán t·∫°i: {question}\n\nH√£y tr·∫£ l·ªùi d·ª±a tr√™n n·ªôi dung t√†i li·ªáu v√† cu·ªôc h·ªôi tho·∫°i."
                response = chat.send_message(context)
            else:
                response = chat.send_message(question)
                
            return {
                "success": True,
                "answer": response.text
            }
        except Exception as e:
            print(f"‚ùå L·ªói khi tr·∫£ l·ªùi c√¢u h·ªèi: {e}")
            return {
                "success": False, 
                "error": str(e)
            }