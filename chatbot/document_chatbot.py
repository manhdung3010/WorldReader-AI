import os
import google.generativeai as genai
from PyPDF2 import PdfReader
from dotenv import load_dotenv
from datetime import datetime
from models.product_model import Product

class DocumentChatbot:
    """Chatbot s·ª≠ d·ª•ng Gemini ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ t√†i li·ªáu v√† s·∫£n ph·∫©m"""
    
    def __init__(self):
        # Load environment variables
        load_dotenv()
        
        # Kh·ªüi t·∫°o Gemini
        genai.configure(api_key=os.getenv('GOOGLE_API_KEY'))
        self.model = genai.GenerativeModel(os.getenv('GOOGLE_MODEL'))
        
        # Kh·ªüi t·∫°o bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ n·ªôi dung t√†i li·ªáu v√† danh s√°ch file ƒë√£ t·∫£i
        self.document_contents = {}  # Dictionary ƒë·ªÉ l∆∞u n·ªôi dung c·ªßa t·ª´ng file
        self.loaded_files = []
        self.document_context = ""  # Th√™m bi·∫øn m·ªõi ƒë·ªÉ cache context
        
        # Kh·ªüi t·∫°o Product model
        self.product_model = Product()
        
        # X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n v√† th∆∞ m·ª•c uploads
        try:
            current_dir = os.path.dirname(os.path.abspath(__file__))
            project_root = os.path.dirname(os.path.dirname(current_dir))
        except:
            current_dir = os.getcwd()
            project_root = os.path.dirname(os.path.dirname(current_dir))
        
        # Th∆∞ m·ª•c uploads n·∫±m trong th∆∞ m·ª•c chatbot
        self.upload_folder = os.path.join(current_dir, "uploads")
        
        # T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
        if not os.path.exists(self.upload_folder):
            os.makedirs(self.upload_folder)
            print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c uploads t·∫°i: {self.upload_folder}")
        else:  
            print(f"‚úÖ Th∆∞ m·ª•c uploads ƒë√£ t·ªìn t·∫°i t·∫°i: {self.upload_folder}")

        # T·ª± ƒë·ªông load l·∫°i t·∫•t c·∫£ documents khi kh·ªüi t·∫°o
        print("üîÑ ƒêang load l·∫°i t·∫•t c·∫£ t√†i li·ªáu...")
        self.reload_all_documents()

    def reload_all_documents(self):
        """Load l·∫°i t·∫•t c·∫£ t√†i li·ªáu t·ª´ th∆∞ m·ª•c uploads"""
        try:
            self.document_contents = {}  # Reset tr∆∞·ªõc khi t·∫£i l·∫°i
            self.loaded_files = []
            self.document_context = ""  # Reset context
            
            if not os.path.exists(self.upload_folder):
                print(f"‚ùå Th∆∞ m·ª•c uploads kh√¥ng t·ªìn t·∫°i: {self.upload_folder}")
                return
                
            all_files = os.listdir(self.upload_folder)
            for filename in all_files:
                file_path = os.path.join(self.upload_folder, filename)
                if os.path.isfile(file_path):  # Ch·ªâ x·ª≠ l√Ω file, b·ªè qua th∆∞ m·ª•c
                    if filename.lower().endswith('.pdf'):
                        self.load_pdf(file_path)
                    elif filename.lower().endswith('.txt'):
                        self.load_text(file_path)
                    elif filename.lower().endswith(('.doc', '.docx')):
                        self.load_word(file_path)
            
            # C·∫≠p nh·∫≠t document_context sau khi load xong
            self._update_document_context()
            print(f"‚úÖ ƒê√£ load {len(self.loaded_files)} t√†i li·ªáu v√† c·∫≠p nh·∫≠t context")
        except Exception as e:
            print(f"‚ùå L·ªói khi load l·∫°i t√†i li·ªáu: {e}")

    def _update_document_context(self):
        """Private method ƒë·ªÉ c·∫≠p nh·∫≠t document context"""
        context = "D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu tham kh·∫£o:\n\n"
        for idx, (file_path, content) in enumerate(self.document_contents.items()):
            file_name = os.path.basename(file_path)
            context += f"\n\n--- DOCUMENT {idx+1}: {file_name} ---\n\n{content}"
        self.document_context = context

    def save_uploaded_file(self, file):
        """L∆∞u file upload v√†o th∆∞ m·ª•c"""
        try:
            # T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
            if not os.path.exists(self.upload_folder):
                os.makedirs(self.upload_folder)
                print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c uploads: {self.upload_folder}")
                
            # T·∫°o t√™n file v·ªõi timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"{timestamp}_{file.filename}"
            file_path = os.path.join(self.upload_folder, filename)
            
            # L∆∞u file
            print(f"ƒêang l∆∞u file t·∫°i: {file_path}")
            file.save(file_path)
            
            # Ki·ªÉm tra xem file ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng ch∆∞a
            if not os.path.exists(file_path):
                print(f"‚ùå Kh√¥ng th·ªÉ l∆∞u file t·∫°i: {file_path}")
                return None
                
            print(f"‚úÖ ƒê√£ l∆∞u file: {filename}")
            
            # Load n·ªôi dung file
            success = False
            if file.filename.lower().endswith('.pdf'):
                success = self.load_pdf(file_path)
            elif file.filename.lower().endswith('.txt'):
                success = self.load_text(file_path)
            elif file.filename.lower().endswith(('.doc', '.docx')):
                success = self.load_word(file_path)
                
            if success:
                # C·∫≠p nh·∫≠t context sau khi th√™m file m·ªõi
                self._update_document_context()
                return file_path
            else:
                # N·∫øu kh√¥ng load ƒë∆∞·ª£c, x√≥a file
                if os.path.exists(file_path):
                    os.remove(file_path)
                return None
                
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u file: {e}")
            import traceback
            traceback.print_exc()
            return None

    def load_pdf(self, pdf_path):
        """ƒê·ªçc n·ªôi dung t·ª´ file PDF"""
        try:
            reader = PdfReader(pdf_path)
            text = ""
            for page in reader.pages:
                page_text = page.extract_text()
                if page_text:  # Ch·ªâ th√™m n·∫øu c√≥ text
                    text += page_text + "\n"
            
            # L∆∞u n·ªôi dung v√†o dictionary v·ªõi key l√† ƒë∆∞·ªùng d·∫´n file
            self.document_contents[pdf_path] = text
            if pdf_path not in self.loaded_files:
                self.loaded_files.append(pdf_path)
            print(f"‚úÖ ƒê√£ load file PDF: {os.path.basename(pdf_path)}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file PDF {os.path.basename(pdf_path)}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def load_text(self, text_path):
        """ƒê·ªçc n·ªôi dung t·ª´ file text"""
        try:
            with open(text_path, 'r', encoding='utf-8') as file:
                content = file.read()
            
            # L∆∞u n·ªôi dung v√†o dictionary v·ªõi key l√† ƒë∆∞·ªùng d·∫´n file
            self.document_contents[text_path] = content
            if text_path not in self.loaded_files:
                self.loaded_files.append(text_path)
            print(f"‚úÖ ƒê√£ load file text: {os.path.basename(text_path)}")
            return True
        except UnicodeDecodeError:
            # Th·ª≠ l·∫°i v·ªõi encoding kh√°c
            try:
                with open(text_path, 'r', encoding='latin-1') as file:
                    content = file.read()
                self.document_contents[text_path] = content
                if text_path not in self.loaded_files:
                    self.loaded_files.append(text_path)
                print(f"‚úÖ ƒê√£ load file text (latin-1): {os.path.basename(text_path)}")
                return True
            except Exception as e:
                print(f"‚ùå L·ªói khi ƒë·ªçc file text {os.path.basename(text_path)}: {e}")
                return False
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file text {os.path.basename(text_path)}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def load_word(self, doc_path):
        """ƒê·ªçc n·ªôi dung t·ª´ file Word (.doc, .docx)"""
        try:
            import textract
            
            # ƒê·ªçc n·ªôi dung file b·∫±ng textract
            text = textract.process(doc_path).decode('utf-8')
            
            # L∆∞u n·ªôi dung v√†o dictionary
            self.document_contents[doc_path] = text
            if doc_path not in self.loaded_files:
                self.loaded_files.append(doc_path)
            print(f"‚úÖ ƒê√£ load file Word: {os.path.basename(doc_path)}")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc file Word {os.path.basename(doc_path)}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def get_loaded_files(self):
        """L·∫•y danh s√°ch c√°c file ƒë√£ t·∫£i"""
        return [os.path.basename(file_path) for file_path in self.loaded_files]

    def delete_file(self, file_name):
        """X√≥a m·ªôt file c·ª• th·ªÉ d·ª±a tr√™n t√™n file"""
        try:
            # T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß t·ª´ t√™n file
            full_path = None
            for path in self.loaded_files:
                if os.path.basename(path) == file_name:
                    full_path = path
                    break
            
            if not full_path:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_name}")
                return False
            
            # X√≥a file v√† lo·∫°i b·ªè kh·ªèi danh s√°ch
            if os.path.exists(full_path):
                os.remove(full_path)
                
            if full_path in self.document_contents:
                del self.document_contents[full_path]
                
            if full_path in self.loaded_files:
                self.loaded_files.remove(full_path)
                
            # C·∫≠p nh·∫≠t context sau khi x√≥a file
            self._update_document_context()
            print(f"‚úÖ ƒê√£ x√≥a file: {file_name}")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói khi x√≥a file {file_name}: {e}")
            import traceback
            traceback.print_exc()
            return False

    def delete_all_files(self):
        """X√≥a t·∫•t c·∫£ c√°c file ƒë√£ t·∫£i"""
        success = True
        for file_path in self.loaded_files[:]:  # Create a copy to iterate
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    
                if file_path in self.document_contents:
                    del self.document_contents[file_path]
                    
                self.loaded_files.remove(file_path)
            except Exception as e:
                print(f"‚ùå L·ªói khi x√≥a file {os.path.basename(file_path)}: {e}")
                success = False
        
        self.document_contents = {}
        self.loaded_files = []
        self.document_context = ""  # Reset context
        
        if success:
            print("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ c√°c file")
        return success

    def add_document_context(self):
        """Th√™m context t·ª´ t·∫•t c·∫£ t√†i li·ªáu v√†o chat"""
        if not self.document_contents:
            return "Kh√¥ng c√≥ t√†i li·ªáu n√†o ƒë∆∞·ª£c load"
        
        # S·ª≠ d·ª•ng context ƒë√£ ƒë∆∞·ª£c cache
        response = self.chat.send_message(self.document_context)
        return response.text

    def get_chat_history(self):
        """L·∫•y l·ªãch s·ª≠ chat"""
        return self.chat_history

    def add_to_history(self, role, content):
        """Th√™m message v√†o l·ªãch s·ª≠ chat"""
        self.chat_history.append({
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        })

    def get_answer(self, question, history=None):
        """Answer questions with chat history from client"""
        try:
            chat = self.model.start_chat(history=[])
            
            # Ki·ªÉm tra xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn s·∫£n ph·∫©m kh√¥ng
            product_results = self.product_model.search_products(question)
            product_context = ""
            if product_results:
                product_context = "\n\nTh√¥ng tin s·∫£n ph·∫©m li√™n quan:\n"
                for product in product_results:
                    product_context += f"- {product.get('name')}: {product.get('description')}\n"
            
            if not self.document_contents and not product_results:
                return {
                    "success": False,
                    "error": "I apologize, but I don't have any information to answer this question."
                }
            
            # System prompt in English
            system_prompt = """You are WorldReader AI, a friendly and knowledgeable book assistant. Your role is to help users discover and understand books while providing insights from their uploaded documents and product information.

                Core Functions:
                1. Provide engaging book descriptions and recommendations
                2. Share interesting facts about authors and their works
                3. Help users find books that match their interests
                4. Answer questions about uploaded documents
                5. Provide information about available products

                Response Style:
                - Keep answers friendly and conversational
                - Be concise but informative
                - Use simple, clear language
                - Include interesting details that make books come alive
                - Share personal reading insights when relevant
                - Include relevant product information when appropriate
                - Provide direct answers without phrases like "According to the document" or "Based on the information provided"
                - Start responses naturally and conversationally

                For Book Queries:
                - Give a brief, engaging summary
                - Mention key themes and why people love the book
                - Share interesting author background
                - Suggest similar books readers might enjoy

                For Document Queries:
                - Focus on the most relevant information
                - Make complex topics easy to understand
                - Use examples to illustrate points
                - Keep responses clear and to the point
                - Provide information directly without referencing the source document

                For Product Queries:
                - Provide accurate product information
                - Highlight key features and benefits
                - Make relevant product recommendations
                - Keep product descriptions clear and engaging

                Remember to:
                - Be warm and encouraging
                - Share your enthusiasm for books
                - Make recommendations personal and relevant
                - Help users discover their next great read
                - Provide helpful product information
                - Give direct answers without unnecessary qualifiers"""
                            
            chat.send_message(system_prompt)
            chat.send_message(self.document_context)
            if product_context:
                chat.send_message(product_context)
            
            if history and len(history) > 0:
                context = "Based on the previous conversation:\n\n"
                for msg in history:
                    context += f"{msg['role']}: {msg['content']}\n"
                context += f"\nRegarding the question: {question}\nPlease respond professionally and warmly."
                response = chat.send_message(context)
            else:
                response = chat.send_message(question)
                
            return {
                "success": True,
                "answer": response.text
            }
        except Exception as e:
            print(f"‚ùå Error while answering question: {e}")
            return {
                "success": False, 
                "error": "Sorry, an error occurred. Please try again later."
            }